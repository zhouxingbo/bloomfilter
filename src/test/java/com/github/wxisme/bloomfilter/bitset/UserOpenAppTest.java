package com.github.wxisme.bloomfilter.bitset;

import com.github.wxisme.bloomfilter.common.BloomFilter;
import org.omg.PortableInterceptor.SYSTEM_EXCEPTION;
import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;
import redis.clients.jedis.JedisPoolConfig;
import redis.clients.jedis.Pipeline;

import java.io.*;
import java.util.*;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class UserOpenAppTest {


    public static void main(String[] args) throws IOException {

        //Don't forget auth password, you better use the configured redis client connection.
        //It should be noted that bloomfilter is not responsible for closing and returning redis connection resources.
        long l=System.currentTimeMillis();
        Map<String,Integer> map=new HashMap<>();
        InputStream is = new FileInputStream("/home/zzcm/桌面/log/20181210/stats_day_1_1211.csv");
        InputStreamReader isr = new InputStreamReader(is);
        BufferedReader br = new BufferedReader(isr);
        String str = null;
        int index = 0;
        BloomFilter<String> filter = new BloomFilter<String>(0.0001, 200000000);
        filter.bind(new JavaBitSet());
        String[] values;
        String s;
        String ss;
        while ((str = br.readLine()) != null) {
            index++;
            if (index % 1000000 == 0) {
                System.out.println(index);
            }
            values=str.split(",");
            s=values[0]+"_"+values[2]+"_"+values[3];
            ss=values[0]+"_"+values[3];
            if(!filter.contains(s)) {
                filter.add(s);
                if(map.get(ss)==null){
                    map.put(ss,1);
                }else{
                    map.put(ss,map.get(ss)+1);
                }
            }
        }
        System.out.println(System.currentTimeMillis()-l);
        String sss="19518_DEL,17979_QUERY,17979_PULL,19599_QUERY,19599_PULL,17583_SDSP,19601_QUERY,19601_PULL,13395_QUERY,19583_QUERY,19583_PULL,17583_QUERY,13395_PULL,19404_QUERY,19602_QUERY,19358_QUERY,19598_QUERY,19598_PULL,19602_PULL,18666_QUERY,17583_PULL,19404_PULL,19403_QUERY,17979_DEL,19358_PULL,19371_QUERY,18926_QUERY,19302_QUERY,19403_PULL,19529_QUERY,18064_QUERY,18926_PULL,14226_QUERY,19371_PULL,19438_QUERY,19402_QUERY,19302_PULL,19529_PULL,18064_PULL,18112_QUERY,14226_DEL,19438_PULL,19402_PULL,19475_QUERY,14226_PULL,17439_SDSP,18112_PULL,19603_QUERY,17982_QUERY,19603_PULL,17982_SHOW,17982_AUTOC,19530_QUERY,19552_QUERY,19551_QUERY,17984_QUERY,18334_QUERY,17982_PULL,19447_PULL,19530_PULL,19542_QUERY,19551_PULL,19552_PULL,19266_DEL,19600_QUERY,17984_SHOW,17984_PULL,18926_SHOW,18666_SHOW,19600_PULL,17984_AUTOC,18926_AUTOC,19447_QUERY,19331_QUERY,19518_QUERY,19332_QUERY,18192_QUERY,19542_PULL,18191_PULL,19578_PULL,19475_PULL,18416_QUERY,18192_PULL,19540_QUERY,19331_PULL,18666_PULL,19332_PULL,18334_PULL,18666_AUTOC,19518_PULL,19544_QUERY,19545_QUERY,18416_PULL,19540_PULL,19544_PULL,19545_PULL,19475_SHOW,19395_PULL,18094_PULL,19403_SHOW,12200_DEL,17987_SHOW,19403_AUTOC,19401_PULL,19222_SHOW,18356_PULL,17987_AUTOC,19400_PULL,10657_SHOW,19401_QUERY,19400_QUERY,18356_QUERY,19529_SHOW,7170_PULL,12200_PULL,9566_QUERY,19529_AUTOC,7170_DEL,18191_QUERY,19475_AUTOC,18666_CANCEL,19402_SHOW,17439_QUERY,19328_QUERY,19222_AUTOC,19551_SHOW,19402_AUTOC,18112_SHOW,19602_DEL,18112_DEL,19551_AUTOC,19552_SHOW,19601_DEL,19438_SHOW,19404_SHOW,7170_QUERY,12200_QUERY,19552_AUTOC,19603_DEL,19496_QUERY,19438_AUTOC,19526_QUERY,19404_AUTOC,19528_QUERY,19447_SHOW,19530_SHOW,17982_CANCEL,10657_AUTOC,18094_QUERY,19395_SHOW,19557_DEL,18112_AUTOC,19496_PULL,19394_QUERY,19453_QUERY,19395_QUERY,19358_SHOW,17986_SHOW,18469_SHOW,10317_QUERY,10316_QUERY,11520_QUERY,12211_QUERY,12210_QUERY,12128_QUERY,12129_QUERY,12126_QUERY,12130_QUERY,11712_QUERY,11708_QUERY,6940_QUERY,7400_QUERY,11518_QUERY,11519_QUERY,11711_QUERY,7364_QUERY,19445_PULL,11709_QUERY,19578_DEL,12772_QUERY,17984_CANCEL,19358_AUTOC,19578_QUERY,16737_QUERY,19447_AUTOC,17986_AUTOC,18469_AUTOC,18926_CANCEL,19401_SHOW,17987_QUERY,19530_DEL,19530_AUTOC,18356_SHOW,19395_AUTOC,19400_SHOW,19475_CANCEL,13392_QUERY,17987_PULL,19401_AUTOC,14733_QUERY,1338_QUERY,10657_CANCEL,9662_QUERY,610_QUERY,4861_QUERY,17720_QUERY,1249_QUERY,18923_SSDK,1578_QUERY,17342_QUERY,19371_SHOW,18356_AUTOC,19541_QUERY,15665_QUERY,14255_QUERY,16142_SHOW,18469_CANCEL,19400_AUTOC,18471_SHOW,19371_AUTOC,16142_AUTOC,14733_PULL,19223_QUERY,19526_PULL,17979_SHOW,19600_SHOW,19222_CANCEL,19222_QUERY,17979_AUTOC,9566_SDSP,13392_PULL,18352_PULL,19266_SHOW,19600_AUTOC,16400_SHOW,18064_SHOW,18471_AUTOC,13395_SHOW,18112_CANCEL,19496_SHOW,19453_SHOW,19394_PULL,16400_AUTOC,19528_PULL,18312_PULL,18064_AUTOC,13395_AUTOC,19583_DEL,17982_CKIMG,17982_SHOW2,19496_AUTOC,19223_PULL,19541_PULL,17982_AUTOC2,16721_SHOW,16380_SHOW,19332_FAIL,17986_QUERY,13490_QUERY,16721_AUTOC,16380_AUTOC,11519_PULL,10662_DEL,11518_PULL,1338_PULL,7364_PULL,12130_PULL,13490_PULL,11708_PULL,11709_PULL,11712_PULL,14623_PULL,19529_FAIL,12126_PULL,12129_PULL,6940_PULL,11711_PULL,7400_PULL,12128_PULL,17720_PULL,13133_QUERY,12211_PULL,12210_PULL,10317_PULL,10316_PULL,15665_PULL,11520_PULL,4861_PULL,17986_PULL,1578_PULL,19553_QUERY,18990_SHOW,9662_PULL,19530_CANCEL,17342_PULL,9566_PULL,17439_PULL,1249_PULL,19554_QUERY,610_PULL,19394_SHOW,14255_PULL,12200_SHOW,18990_AUTOC,17982_CANCEL2,19453_PULL,16142_CANCEL,19554_SHOW,19584_DEL,19553_SHOW,18926_CKIMG,18926_SHOW2,19179_SHOW,17984_CKIMG,17984_SHOW2,18926_AUTOC2,18778_SHOW,18416_SHOW,7170_SHOW,19402_FAIL,17984_AUTOC2,19438_FAIL,19403_CANCEL,18312_QUERY,19395_CANCEL,13133_PULL,19179_AUTOC,18416_AUTOC,14623_QUERY,7400_SHOW,12772_PULL,17438_QUERY,17436_QUERY,17437_QUERY,17434_QUERY,17435_QUERY,17433_QUERY,17432_QUERY,17430_QUERY,17431_QUERY,17425_QUERY,17424_QUERY,17427_QUERY,17422_QUERY,17428_QUERY,17420_QUERY,17429_QUERY,17421_QUERY,17423_QUERY,17426_QUERY,18471_CANCEL,19266_AUTOC,19222_PULL,16823_QUERY,16824_QUERY,16825_QUERY,16820_QUERY,16821_QUERY,16822_QUERY,16818_QUERY,16817_QUERY,16819_QUERY,17987_CANCEL,10657_QUERY,16799_QUERY,16798_QUERY,16797_QUERY,16815_QUERY,16812_QUERY,16813_QUERY,16814_QUERY,16810_QUERY,16811_QUERY,16816_QUERY,16802_QUERY,16801_QUERY,16803_QUERY,16800_QUERY,16804_QUERY,16809_QUERY,16805_QUERY,16807_QUERY,16806_QUERY,16808_QUERY,19453_AUTOC,12211_SHOW,12130_SHOW,10317_SHOW,11518_SHOW,12128_SHOW,10316_SHOW,12210_SHOW,12129_SHOW,11708_SHOW,11520_SHOW,7364_SHOW,12126_SHOW,9559_QUERY,9561_QUERY,9560_QUERY,9563_QUERY,9562_QUERY,9558_QUERY,9565_QUERY,9564_QUERY,9557_QUERY,9516_QUERY,9517_QUERY,9518_QUERY,9519_QUERY,9515_QUERY,9511_QUERY,9514_QUERY,9512_QUERY,9513_QUERY,11519_SHOW,9510_QUERY,6940_SHOW,11712_SHOW,6345_QUERY,6329_QUERY,6343_QUERY,6327_QUERY,6342_QUERY,6340_QUERY,6346_QUERY,4047_QUERY,6344_QUERY,6341_QUERY,6326_QUERY,6328_QUERY,6330_QUERY,7897_QUERY,7879_QUERY,7877_QUERY,9805_QUERY,9804_QUERY,6066_QUERY,6068_QUERY,6067_QUERY,6065_QUERY,6063_QUERY,6064_QUERY,6608_QUERY,6609_QUERY,9570_QUERY,9571_QUERY,6610_QUERY,9790_QUERY,9792_QUERY,9791_QUERY,9569_QUERY,9567_QUERY,9779_QUERY,9568_QUERY,6392_QUERY,9781_QUERY,6398_QUERY,6393_QUERY,6390_QUERY,9786_QUERY,6399_QUERY,6391_QUERY,9787_QUERY,9780_QUERY,9788_QUERY,9785_QUERY,6394_QUERY,6395_QUERY,9789_QUERY,9783_QUERY,9782_QUERY,9769_QUERY,9784_QUERY,9768_QUERY,9778_QUERY,9775_QUERY,9770_QUERY,9776_QUERY,9777_QUERY,9772_QUERY,9773_QUERY,9774_QUERY,9771_QUERY,4070_QUERY,6349_QUERY,4049_QUERY,4048_QUERY,6347_QUERY,6348_QUERY,4058_QUERY,4050_QUERY,4057_QUERY,4056_QUERY,4053_QUERY,4054_QUERY,4055_QUERY,4052_QUERY,4051_QUERY,16737_PULL";
        String[] value=sss.split(",");
        for(String key:value){
            System.out.println(key+";"+map.get(key));
        }
    }
}

class UserOpenBoolmRunnable implements Runnable {

    private BloomFilter<String> filter;

    private JedisPool pool;

    Set<String> l = null;

    public UserOpenBoolmRunnable(BloomFilter<String> filter, JedisPool pool, Set<String> l) {
        this.filter = filter;
        this.pool = pool;
        this.l = l;
    }

    @Override
    public void run() {
        Jedis jedis = RedisBitSet.getJedis(pool);
        Pipeline pipeline = jedis.pipelined();
        try {
            int index=0;
            String values[];
            for (String str:l) {
                index++;
                if (!filter.contains(str)) {
                    ((RedisBitSet) filter.getBitSet()).setPipeline(pipeline);
                    filter.add(str);
                    values=str.split(",");
                    pipeline.incrBy("" + values[1]+"_"+values[2], 1);
                }
                if (index % 10000 == 0) {
                    pipeline.sync();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            pipeline.sync();
            if (jedis != null) {
                jedis.close();
            }
        }
    }
}
